name: CI

on:
  push:
    branches:
      - "*"
    paths-ignore:
      - ".gitignore"
      - "LICENSE"
      - "README.md"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare environment variables
        run: cat .github/.env >> $GITHUB_ENV

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: GitHub

      - name: Login to Amazon ECR Public
        if: github.event_name != 'pull_request'
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Check latest Debian image
        id: debian
        run: |
          echo DEBIAN_TAG=$(docker run --rm gcr.io/go-containerregistry/crane ls debian | grep -P '^bullseye-[0-9]+$' | sort -r | head -n1) | tee -a $GITHUB_ENV

      - name: Check latest asdf release
        id: asdf
        run: |
          echo ASDF_RELEASE=v$(curl -s https://api.github.com/repos/asdf-vm/asdf/releases | grep -oE 'tag_name": ".{1,15}",' | sed 's/tag_name\": \"v//;s/\",//' | grep -vE '^(0\.[12]\.|0\.3\.0$)' | sed 'h; s/[+-]/./g; s/.p\([[:digit:]]\)/.z\1/; s/$/.z/; G; s/\n/ /' | LC_ALL=C sort -t. -k 1,1 -k 2,2n -k 3,3n -k 4,4n -k 5,5n | awk '{print $2}' | tail -n1) | tee -a $GITHUB_ENV

      - name: Prepare new release tag
        id: image
        run: echo IMAGE_TAG=${DEBIAN_TAG}-asdf-${ASDF_RELEASE#v} | tee -a $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.IMAGE_REPO }}
          tags: |
            type=edge
            type=raw,prefix=build-,value=${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
            type=sha
            type=ref,event=branch
            type=ref,event=pr
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_TITLE }}
            org.opencontainers.image.vendor=${{ env.IMAGE_VENDOR }}
            org.opencontainers.image.version=${{ env.IMAGE_TAG }}

      - name: Build and push
        uses: int128/kaniko-action@v1
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ASDF_RELEASE=${{ env.ASDF_RELEASE }}
            DEBIAN_TAG=${{ env.DEBIAN_TAG }}
          kaniko-args: |
            --tarPath=/kaniko/action/output/image.tar
            --single-snapshot
            --skip-unused-stages
            --snapshotMode=redo
            --use-new-run

      - name: Reuse built image
        run: docker load -i /tmp/kaniko-action-*/image.tar

      - name: Test built image
        run: docker run --rm -t ${IMAGE_REPO}:edge bash -c "asdf version" | grep $ASDF_RELEASE

      - name: Retag to release
        if: github.event_name != 'pull_request'
        run: docker tag ${IMAGE_REPO}:edge ${IMAGE_REPO}:${IMAGE_TAG}

      - name: Push the release
        if: github.event_name != 'pull_request'
        run: docker push ${IMAGE_REPO}:${IMAGE_TAG}

      - name: Retag to latest
        if: github.event_name != 'pull_request'
        run: docker tag ${IMAGE_REPO}:edge ${IMAGE_REPO}:latest

      - name: Push the latest
        if: github.event_name != 'pull_request'
        run: docker push ${IMAGE_REPO}:latest

      - name: Create new git tag
        if: github.event_name != 'pull_request'
        run: |
          git tag -f ${IMAGE_TAG}
          git push -f origin ${IMAGE_TAG}
